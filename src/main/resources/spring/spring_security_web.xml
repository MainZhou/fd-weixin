<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	   		http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/security
			http://www.springframework.org/schema/security/spring-security.xsd">

    <!--  Spring-Security 的配置 -->

    <!-- /static/** 及 /grid/** 不需要spring security管理 -->
    <security:http pattern="/static/**" security='none'/>
    <security:http pattern="/grid/**" security='none'/>
    <security:http pattern="/" security="none" />
    <security:http pattern="/user/login" security="none" />
    <security:http pattern="/validatecode" security="none" />
    <security:http pattern="/oauth/token" security="none" />
    <security:http pattern="/user/sessionTimeout" security="none" />
    <security:http pattern="/login.jsp" security="none" />
    <security:http pattern="/baoGao.jsp" security="none" />
    <security:http pattern="/saoMa.jsp" security="none" />
    <security:http pattern="/xiaofeiInfo.jsp" security="none" />
    <security:http pattern="/wxLogin" security="none" />
    <security:http pattern="/jsp/**" security="none" />
    <security:http pattern="/scanCode/*" security="none" />
    <security:http pattern="/registerData" security="none" />
    <!--<security:http pattern="/druid/**" security="none" />-->
	<!--<security:http pattern="/zTree/*" security="none" />-->
	<!--<security:http pattern="/zTree*" security="none" />-->
	<security:http pattern="/favicon.ico" security="none" />
    <!-- 注意use-expressions=true.表示开启表达式,否则表达式将不可用 -->
    <security:http entry-point-ref="loginUrlAuthenticationEntryPoint">

        <!--
            invalidate-session：指定在退出系统时是否要销毁Session。
            logout-success-url：退出系统后转向的URL。
            logout-url：指定了用于响应退出系统请求的URL。其默认值为：/j_spring_security_logout。
        -->
        <!--<security:logout invalidate-session="true" logout-success-url="/user/login" logout-url="/user/logout" success-handler-ref="" />-->

        <security:session-management invalid-session-url="/user/sessionTimeout"/>

        <!-- 登录验证码过滤器,替换FORM_LOGIN_FILTER -->
        <security:custom-filter position="FORM_LOGIN_FILTER" ref="validateCodeUsernamePasswordAuthenticationFilter"/>
        <!-- 自定义验证器,自定义认证，授权 -->
        <security:custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="customSecurityFilter"/>

        <!--
            max-sessions:允许用户帐号登录的次数。范例限制用户只能登录一次。exception-if-maximum-exceeded:
            默认为false，此值表示：用户第二次登录时，前一次的登录信息都被清空。当exception-if-maximum-exceeded="true"时系统会拒绝第二次登录。
        -->
        <!--<security:session-management>-->
            <!--<security:concurrency-control error-if-maximum-exceeded="true" max-sessions="1"/>-->
        <!--</security:session-management>-->

        <!--
            开启csrf
            使用: <input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}"/>
        -->
        <security:csrf disabled="true"/>

        <!-- 安全头部信息 -->
        <security:headers disabled="true">
            <security:cache-control disabled="true" /> <!-- 控制缓存 -->
            <security:content-type-options disabled="true" /> <!--  攻击者可以让原本应该解析为图片的请求被解析为JavaScript。禁用浏览器的类型猜测行为 -->
            <security:hsts disabled="true" /><!-- 让浏览器自动跳转https -->
            <security:frame-options disabled="true" /> <!-- 浏览器拒绝当前页面加载任何Frame页面 -->
            <security:xss-protection disabled="true"/> <!-- 防止xss攻击 -->
        </security:headers>
    </security:http>

    <!-- 登录界面 -->
    <bean id = "loginUrlAuthenticationEntryPoint"
          class = "org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <constructor-arg name="loginFormUrl" value="/user/sessionTimeout"/> <!-- 跳转到sessionTimeout ajax才能处理-->
        <property name="useForward" value="true"/>
    </bean>

    <!-- 认证管理器 -->
    <!-- 指定一个自定义的authentication-manager :customUserDetailsService -->
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider user-service-ref="customUserDetailsService">
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>
    <!--
        通过 customUserDetailsService,Spring会控制用户的访问级别.
        也可以理解成:以后我们和数据库操作就是通过customUserDetailsService来进行关联.
    -->
    <bean id="customUserDetailsService" class="com.boyoi.base.service.impl.CustomUserDetailsServiceImpl" />
    <!-- 对密码进行自定义编码 sha1 两次-->
    <bean id="passwordEncoder" class="com.boyoi.base.security.CustomPasswordEncoder" />

    <!-- 登录验证码过滤器,替换FORM_LOGIN_FILTER -->
    <bean id="validateCodeUsernamePasswordAuthenticationFilter"
          class="com.boyoi.base.security.filter.ValidateCodeUsernamePasswordAuthenticationFilter">
        <property name="authenticationSuccessHandler" ref="loginSuccessHandler"/>
        <property name="authenticationFailureHandler" ref="loginFailureHandler"/>
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="filterProcessesUrl" value="/boyoi_security/loginFun"/>
        <property name="usernameParameter" value="login_name"/>
        <property name="passwordParameter" value="password"/>
        <property name="allowValidate" value="true"/> <!-- 是否校验 验证码 -->
    </bean>
    <!-- 登录成功后的处理器 -->
    <bean id="loginSuccessHandler"
          class="com.boyoi.base.security.LoginSuccessHandler">
        <property name="userService" ref="userServiceImpl"/>
        <property name="logLoginService" ref="logLoginServiceImpl"/>
    </bean>
    <!-- 登录失败后的处理器 -->
    <bean id="loginFailureHandler" class="com.boyoi.base.security.LoginFailureHandler" />

    <!-- 自定义权限,验证 过滤器 -->
    <bean id="customSecurityFilter" class="com.boyoi.base.security.CustomSecurityInterceptor">
        <property name="authenticationManager" ref="authenticationManager"/>    <!-- 认证管理器 -->
        <property name="accessDecisionManager">
            <bean class="com.boyoi.base.security.CustomAccessDecisionManager"/> <!-- 访问决策器 -->
        </property>
        <property name="securityMetadataSource" ref="securityMetadataSource" /> <!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
    </bean>
    <!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
    <bean id="securityMetadataSource" class="com.boyoi.base.security.CustomInvocationSecurityMetadataSource">
        <constructor-arg name="roleService"  ref="roleServiceImpl"/>        <!-- 利用构造函数初始化 -->
    </bean>

</beans>